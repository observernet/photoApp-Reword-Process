/*****************************************************
 * 프로그램ID	: RewordWS.pc
 * 프로그램명	: 웨더스테이션 보상을 한다
 *****************************************************/

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <unistd.h>
#include <signal.h>
#include <errno.h>

#include <sys/types.h>
#include <time.h>

#include <network.h>
#include <profile.h>
#include <ft_common.h>
#include <ora_common.h>

#include <SyncRedis_interface.h>
#include "RewordWS.h"

/*************************************************************************************
 * 구현 시작..
 *************************************************************************************/

int main(int argc, char** argv)
{
	int sidx, rcode = 0;

	SetProgramName(argv[0]);
	if ( argc == 2 )
	{
		char stime[32];
		struct tm tm;

		sprintf(stime, "%s%06d", argv[1], 0);
		strptime(stime, "%Y%m%d%H%M%S", &tm);
		input_time = mktime(&tm);
	}
	else
		input_time = 0;
	
	/* 서버를 초기화 한다. */
	InitServer();
	
	/* 설정정보를 가져온다 */
	if ( (rcode = FetchConfig()) == -1 )
	{
		goto PROGRAM_END;
	}
	
	/* 회차정보를 가져온다 */
	if ( (rcode = FetchSeries()) == -1 )
	{
		goto PROGRAM_END;
	}

	/* 보상 OBSP를 지급한다 */
	for ( sidx = 0 ; sidx < series_count ; sidx++ )
	{
		if ( (rcode = RewordOBSP(sidx)) == -1 )
		{
			struct sqlca sqlca;
			EXEC SQL CONTEXT USE :ctx;
			EXEC SQL ROLLBACK;

			goto PROGRAM_END;
		}
	}

	/* 보상을 완료한다 */
	CompleteReword();
	
PROGRAM_END:
	interrupt(rcode);
	exit(EXIT_SUCCESS);
}

/**
 * 설정정보를 가져온다
 */
int FetchConfig()
{	
	time_t  timer;
	struct  tm  *_tm;

	/* 오라클사용 등록 */
	struct sqlca sqlca;
	EXEC SQL CONTEXT USE :ctx;
	
	/* 메모리 초기화 */
	memset(&config, 0x00, sizeof(REWORD_CONFIG));
	
	/* 실행시간을 결정한다 */
	if ( input_time == 0 ) (void)time(&timer);
	else				   timer = input_time;

	_tm = localtime(&timer);
	config.reword_week = _tm->tm_wday;
	config.reword_date = (_tm->tm_year+1900) * 10000 + (_tm->tm_mon+1) * 100 + (_tm->tm_mday);
	config.target_date = intDateFrom(timer - 86400);
	
	/* 보상 접수 상태를 기록한다 */
	EXEC SQL SELECT NVL(MAX(REWORD_IDX), 0) + 1 INTO :config.reword_idx FROM REWORD_LIST;
	EXEC SQL
		INSERT INTO REWORD_LIST (REWORD_IDX, REWORD_TYPE, DEVICE, REWORD_DATE, TARGET_DATE, PROC_STATUS, UPDATE_TIME)
						 VALUES (:config.reword_idx, 'R', 'W', :config.reword_date, :config.target_date, 'A', sysdate);
	if ( _SQLNOTOK )
	{
		Log("FetchConfig: 보상 접수 기록 도중 에러가 발생하였습니다. sqlcode[%d]\n", sqlca.sqlcode);
		EXEC SQL ROLLBACK;
 		return (-1);
	}
	EXEC SQL COMMIT;
			
 	/* 로그기록 */
	Log("FetchConfig: 보상 INDEX   [%d]\n", config.reword_idx);
 	Log("FetchConfig: 보상 날짜    [%d]\n", config.reword_date);
	Log("FetchConfig: 보상 요일    [%d]\n", config.reword_week);
	Log("FetchConfig: 보상 대상일  [%d]\n", config.target_date);
	
	return (0);
}

/**
 * 회차정보를 가져온다
 */
int FetchSeries()
{	
	int i;
	char sql[MAX_BUFFER];

	SERIES_INFO sinfo;
	time_t curtime, basetime;
	
	/* 오라클사용 등록 */
	struct sqlca sqlca;
	EXEC SQL CONTEXT USE :ctx;
	
	/* 메모리 초기화 */
	series_count = 0;
	series = NULL;
	time(&curtime);
	
	/* 회차정보를 가져온다 */
	sprintf(sql, "SELECT SERIES, REWORD_BASE, REWORD_OBSR "
				 "FROM MWS_SERIES "
				 "WHERE IS_USE = 'Y' "
		  		 "  and IS_ACTIVE = 'Y' "
		  		 "  and REWORD_WEEK_%d = 'Y' ",
				 config.reword_week
	);

	/* 쿼리를 실행한다 */
	EXEC SQL PREPARE _GET_SERIES_LIST_S FROM :sql;
	EXEC SQL DECLARE _GET_SERIES_LIST CURSOR FOR _GET_SERIES_LIST_S;

	EXEC SQL OPEN _GET_SERIES_LIST;
	if ( _SQLOK )
	{
		while (1)
		{
			memset(&sinfo, 0x00, sizeof(SERIES_INFO));
			EXEC SQL FETCH _GET_SERIES_LIST INTO :sinfo.series, :sinfo.base, :sinfo.amount;
				
			if ( _SQLNOTFOUND ) break;
			
			/* 기준시간을 실제시간으로 환산한다 */
			basetime = curtime - (long)(sinfo.base * 3600);
			sinfo.basetime = (long)intDateFrom(basetime) * 1000000 + (long)intTimeFrom(basetime);
			
			/* 회차정보를 저장한다 */
			series = (SERIES_INFO*)realloc(series, sizeof(SERIES_INFO)*(series_count+1));
			memcpy(&series[series_count], &sinfo, sizeof(SERIES_INFO));
			series_count++;
		}
	}
	else
	{
		Log("FetchSeries: 회차내역을 가져오는 도중 에러가 발생하였습니다. sqlcode[%d]\n", sqlca.sqlcode);
 		return (-1);
	}
	EXEC SQL CLOSE _GET_SERIES_LIST;
			
 	/* 로그기록 */
 	Log("FetchSeries: 보상회차건수 [%d]\n", series_count);
 	for ( i = 0 ; i < series_count ; i++ )
 	{
		Log("FetchSeries: 보상회차 [%d회] base[%d] basetime[%ld] amount[%.2lf]\n", series[i].series, series[i].base, series[i].basetime, series[i].amount);
	}
	
	return (0);
}

/**
 * 보상금액을 OBSP로 지급한다
 */
int RewordOBSP(int sidx)
{
	int idx;
	MWS_INFO minfo;
	
	/* 오라클사용 등록 */
	struct sqlca sqlca;
	EXEC SQL CONTEXT USE :ctx;
	
	/* 전송대상 내역을 가져온다 */
	EXEC SQL DECLARE _GET_MWS_LIST CURSOR for
		SELECT SERIAL_NO FROM MWS_SERIES_SERIAL WHERE SERIES = :series[sidx].series and IS_ACTIVE = 'Y';
	
	EXEC SQL OPEN _GET_MWS_LIST;
	if ( _SQLOK )
	{
		while (1)
		{
			EXEC SQL CONTEXT USE :ctx;

			memset(&minfo, 0x00, sizeof(MWS_INFO));
			EXEC SQL FETCH _GET_MWS_LIST INTO :minfo.serial_no;
				
			if ( _SQLNOTFOUND ) break;
			
			/* 해당시리얼의 사용자키를 가져온다 */
			EXEC SQL
				SELECT USER_KEY INTO :minfo.user_key
				FROM USER_MWS_INFO
				WHERE SERIAL_NO = :minfo.serial_no
				  and IS_USE = 'Y';
			
			if ( _SQLNOTOK )
			{
				Log("RewordOBSP: 사용자키를 가져오는 도중 에러가 발생하였습니다. serial_no[%ld] sqlcode[%d]\n", minfo.serial_no, sqlca.sqlcode);
				return (-1);
			}
			str_trim(minfo.user_key, TRIM_ALL);

			/* 해당시리얼의 최종전송시간을 가져온다 */
			EXEC SQL CONTEXT USE :ctx_data;
			EXEC SQL
				SELECT NVL(MAX(DATA_DATE * 1000000 + DATA_TIME), 0) INTO :minfo.last_observ_time
				FROM OBSERV_MWS
				WHERE SERIAL_NO = :minfo.serial_no;
			
			if ( _SQLNOTOK )
			{
				Log("RewordOBSP: WS의 최종전송시간을 가져오는 도중 에러가 발생하였습니다. serial_no[%ld] sqlcode[%d]\n", minfo.serial_no, sqlca.sqlcode);
				return (-1);
			}
						
			/* 최종관측시간이 기준시간보다 늦다면 */
			if ( minfo.last_observ_time >= series[sidx].basetime )
			{
				/* 해당일의 전송건수를 가져온다 */
				EXEC SQL CONTEXT USE :ctx_data;
				EXEC SQL
					SELECT count(DATE_IDX) INTO :minfo.count_data
					FROM OBSERV_MWS
					WHERE DATA_DATE = :config.target_date
					  and SERIAL_NO = :minfo.serial_no;
				
				if ( _SQLNOTOK )
				{
					Log("RewordOBSP: WS의 데이타 건수를 가져오는 도중 에러가 발생하였습니다 serial_no[%ld] sqlcode[%d]\n", minfo.serial_no, sqlca.sqlcode);
					return (-1);
				}

				/* 보상내역에 삽입한다 */
				EXEC SQL CONTEXT USE :ctx;
				EXEC SQL
					INSERT INTO REWORD_DETAIL
						(
							REWORD_IDX, USER_KEY, SERIAL_NO, REWORD_AMOUNT, COUNT_WS_DATA, UPDATE_TIME
						)
						VALUES
						(
							:config.reword_idx, :minfo.user_key, :minfo.serial_no, :series[sidx].amount, :minfo.count_data, sysdate
						);

				if ( _SQLNOTOK )
				{
					Log("RewordOBSP: 보상내역 삽입 도중 에러가 발생하였습니다 serial_no[%ld] sqlcode[%d]\n", minfo.serial_no, sqlca.sqlcode);
					return (-1);
				}

				Log("[PROCESS] 보상내역삽입 series[%d] serial_no[%ld] user_key[%s] amount[%lf]\n", series[sidx].series, minfo.serial_no, minfo.user_key, series[sidx].amount);

				/* 보상 대상 유저키에 삽입한다 */
				for ( idx = 0 ; idx < user_count ; idx++ )
				{
					if ( strcmp(user[idx].user_key, minfo.user_key) == 0 )
						break;
				}
				if ( idx >= user_count )
				{
					user = (REWORD_USER*)realloc(user, sizeof(REWORD_USER)*(user_count+1));
					sprintf(user[user_count].user_key, "%s", minfo.user_key);
					user_count++;
				}
			}
		}
	}
	else
	{
		Log("RewordOBSP: 대상내역을 가져오는 도중 에러가 발생하였습니다. sqlcode[%d]\n", sqlca.sqlcode);
 		return (-1);
	}
	EXEC SQL CLOSE _GET_MWS_LIST;
	
	return (0);
}

/**
 * 보상을 완료한다
 */
void CompleteReword()
{
	double reword_amount;
	long count_ws_data;
	int count_user, count_ws;

	/* 오라클 사용 등록 */
	struct sqlca sqlca;
	EXEC SQL CONTEXT USE :ctx;

	/* 통계정보를 가져온다 */
	EXEC SQL
		SELECT NVL(SUM(REWORD_AMOUNT), 0), NVL(SUM(COUNT_WS_DATA), 0) INTO :reword_amount, :count_ws_data
		FROM REWORD_DETAIL
		WHERE REWORD_IDX = :config.reword_idx;
	
	if ( _SQLNOTOK )
	{
		Log("CompleteReword: 통계정보를 가져오는 도중 에러가 발생하였습니다. sqlcode[%d]\n", sqlca.sqlcode);
		EXEC SQL ROLLBACK;
		return;
	}

	/* 사용자수를 가져온다 */
	EXEC SQL
		SELECT count(USER_KEY) INTO :count_user
		FROM
		(
			SELECT distinct USER_KEY FROM REWORD_DETAIL WHERE REWORD_IDX = :config.reword_idx
		);
	
	if ( _SQLNOTOK )
	{
		Log("CompleteReword: 사용자 통계를 가져오는 도중 에러가 발생하였습니다. sqlcode[%d]\n", sqlca.sqlcode);
		EXEC SQL ROLLBACK;
		return;
	}

	/* WS수를 가져온다 */
	EXEC SQL
		SELECT count(SERIAL_NO) INTO :count_ws
		FROM
		(
			SELECT distinct SERIAL_NO FROM REWORD_DETAIL WHERE REWORD_IDX = :config.reword_idx
		);
	
	if ( _SQLNOTOK )
	{
		Log("CompleteReword: WS 통계를 가져오는 도중 에러가 발생하였습니다. sqlcode[%d]\n", sqlca.sqlcode);
		EXEC SQL ROLLBACK;
		return;
	}

	/* 보상상태를 변경한다 */
	EXEC SQL UPDATE REWORD_LIST SET TOTAL_REWORD = :reword_amount,
									COUNT_USER = :count_user,
									COUNT_WS = :count_ws,
									COUNT_WS_DATA = :count_ws_data,
									PROC_STATUS = 'V'
	WHERE REWORD_IDX = :config.reword_idx;

	if ( _SQLNOTOK )
	{
		Log("CompleteReword: 보상내역을 갱신하는 도중 에러가 발생하였습니다 sqlcode[%d]\n", sqlca.sqlcode);
		EXEC SQL ROLLBACK;
		return;
	}

	EXEC SQL COMMIT;
	Log("CompleteReword: WS 보상 완료! RewordIDX[%d]\n", config.reword_idx);

	/* REDIS 유저정보를 갱신한다 */
	UpdateUserInfoRedis();
}

/**
 * REDIS의 사용자 통계정보를 갱신한다
 */
void UpdateUserInfoRedis()
{
	SOCKET sockfd;
    char key[128];
    char sndbuf[MAX_BUFFER], rcvbuf[MAX_BUFFER];
    int idx, length;

	/* 서버연결 */
    if ( (sockfd = GetConnectSocket(syncredis_ip, syncredis_port)) == -1 )
    {
        Log("UpdateUserInfoRedis: 서버 접속에 실패하였습니다!! host[%s:%d] errno[%d]\n", syncredis_ip, syncredis_port, errno);
        return;
    }

	for ( idx = 0 ; idx < user_count ; idx++ )
	{
		/* 보낼데이타를 세팅한다 */
		memset(key, 0x00, 128);
		memset(sndbuf, 0x00, MAX_BUFFER);
		sprintf(key, "PhotoApp:UserInfo:%s:stat", user[idx].user_key);
		sprintf(sndbuf, "%0*ld%c%s", SRI_LENGTH_SIZE, strlen(key) + 1, 'U', key);

		/* 데이타를 전송한다 */
		if ( SendTCP(sockfd, sndbuf, strlen(sndbuf), 0) == -1 )
		{
			Log("UpdateUserInfoRedis: 데이타 전송에 실패하였습니다. sndbuf[%s] errno[%d]\n", sndbuf, errno);
			break;
		}

		/* 응답데이타를 읽어온다 */
		memset(rcvbuf, 0x00, MAX_BUFFER);
		if ( ReceiveTCP(sockfd, rcvbuf, SRI_LENGTH_SIZE, 0) <= 0 )
		{
			Log("UpdateUserInfoRedis: 응답 사이즈 수신에 실패하였습니다. errno[%d]\n", errno);
			break;
		}
		if ( (length = atoi(rcvbuf)) > 0 )
		{
			if ( ReceiveTCP(sockfd, rcvbuf + SRI_LENGTH_SIZE, length, 0) <= 0 )
			{
				Log("UpdateUserInfoRedis: 응답 데이타 수신에 실패하였습니다. errno[%d]\n", errno);
				break;
			}
		}

		usleep(10000);
	}

    CloseSocket(sockfd);
}

/*************************************************************************************
 * 초기화 함수
 *************************************************************************************/

/**
 * 서버를 초기화한다.
 */ 
void InitServer()
{
	char db_user[32], db_user_data[32], conf_file_name[128];;
	struct sqlca sqlca;
	
	/* 공유메모리를 초기화 한다. */
	InitCommonMemory();
	
	/* 설정파일을 연다. */
	sprintf(conf_file_name, "%s/%s/%s", mdb->program_home, CONF_PATH, SERVER_CONFIG_FILE);
	if ( !OpenProfile(conf_file_name) )
	{
		Log("InitServer: 설정파일을 여는 도중 에러가 발생하였습니다. file[%s] errno[%d]\n", conf_file_name, errno);
		exit(EXIT_FAILURE);
	}

	/* DB연결정보를 가져온다 */
	GetProfileString("MAIN", "ORACLE_USER", db_user);
	GetProfileString("MAIN", "ORACLE_USER_DATA", db_user_data);
	GetProfileString("SyncRedis", "SERVER_IP", syncredis_ip);
	syncredis_port = GetProfileInt("SyncRedis", "SERVER_PORT", 0);

	/* 설정파일을 닫는다. */
	CloseProfile();
	
 	/* DB에 접속한다. */
	EXEC SQL CONTEXT ALLOCATE :ctx;
	EXEC SQL CONTEXT USE :ctx;
	EXEC SQL CONNECT :db_user;
	
	/* DB에 접속한다. (WS데이타) */
	EXEC SQL CONTEXT ALLOCATE :ctx_data;
	EXEC SQL CONTEXT USE :ctx_data;
	EXEC SQL CONNECT :db_user_data;

	/* 시스널 핸들러 설정 */
	signal(SIGHUP, SIG_IGN);
	signal(SIGPIPE, SIG_IGN);
	signal(SIGINT, interrupt);
    signal(SIGTERM, interrupt);
    signal(SIGQUIT, interrupt);
    
	Log("InitServer: 서버 초기화! Process Start..................................\n");
}

/**
 * 서버를 종료한다.
 */
void interrupt(int sig)
{
	struct sqlca sqlca;

	/* 리턴코드가 에러이면 */
	if ( sig == -1 && config.reword_idx > 0 && config.reword_idx <= 99999 )
	{
		EXEC SQL CONTEXT USE :ctx;
		EXEC SQL UPDATE REWORD_LIST SET PROC_STATUS = 'Z' WHERE REWORD_IDX = :config.reword_idx;
		EXEC SQL COMMIT;
	}

	/* 메모리해제 */
	if ( series ) free(series);
	if ( user ) free(user);
	
	/* DB연결을 종료한다. (WS데이타) */
	EXEC SQL CONTEXT USE :ctx_data;
	EXEC SQL COMMIT WORK RELEASE;
	EXEC SQL CONTEXT FREE :ctx_data;

	/* DB연결을 종료한다. */
	EXEC SQL CONTEXT USE :ctx;
	EXEC SQL COMMIT WORK RELEASE;
	EXEC SQL CONTEXT FREE :ctx;
	
	/* 프로세스 등록 해제 */
	DeAttachShm((void*)mdb);
	
    exit(EXIT_SUCCESS);
}

